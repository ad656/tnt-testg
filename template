import paho.mqtt.client
import time
import struct
import queue
import sys
import ssl
import json

import requests
import datetime
import random

apiBaseUrl = "https://api.tagntrac.io/device/v2/loggers/schedule/command"
idToken = ""

class Logger:
    def __init__(self, deviceId, command, profile, project, deprovision, lookback_hours):
        self.deviceId = deviceId
        self.command = command
        self.profile = profile
        self.project = project
        self.deprovision = deprovision
        self.lookback_hours = lookback_hours

class Gateway:
    def __init__(self, site, zone):
        self.site = site
        self.zone = zone

def send_webhooks(webhooks, desired_object):
    for webhook in webhooks:
        payload = {
            "desired": desired_object
        }
        headers = {
            "Content-Type": "application/json"
        }
        response = requests.post(webhook, json=payload, headers=headers)
        

def process_schedule_command(apiBaseUrl, idToken, webhooks, site, zone, type, loggers):
    # 1. organizationId is derived from the token.
    organizationId = get_organization_id_from_token(idToken)

    # 2. Logger meta-data is fetched from RDS using all deviceIds and organizationId.
    logger_metadata = get_logger_metadata(loggers, organizationId)

    # 3. If none of the logger belongs to the organization of the authenticated user, an error is returned.
    if not logger_metadata:
        return {"error": "None of the loggers belong to the organization."}

    # 4. In a loop, the lastUploadedAt field of each logger is checked to see if it is before the number of lookback_hours from now or not.
    # 5. If yes, the command payload is formed for each logger and added in ble_cmds array. If no, the logger info is discarded.
    ble_cmds = []
    current_time = datetime.datetime.now()
    for logger in logger_metadata:
        last_uploaded_at = logger["lastUploadedAt"]
        time_diff = current_time - last_uploaded_at
        if time_diff.total_seconds() / 3600 > logger["lookback_hours"]:
            ble_cmd = {
                "addr": logger["deviceId"],
                "cmd": logger["command"],
                "profileId": logger["profile"],
                "project": logger["project"],
                "deprovision": logger["deprovision"],
                "lookback_hours": logger["lookback_hours"]
            }
            ble_cmds.append(ble_cmd)

    # 6. The deprovision field and project field is checked if the logger is to be only deprovisioned or reassigned to other project and appropriate action is taken.
    for logger in logger_metadata:
        if logger["deprovision"]:
            # Perform deprovisioning action for logger
            deprovision_logger(logger)
        else:
            # Perform reassignment action for logger to another project
            reassign_logger(logger)

    # 7. Gateways belonging to the site/zone are fetched from RDS.
    gateways = get_gateways(site, zone)

    # 8. Shadow of each gateway is fetched from AWS-IoT Core.
    for gateway in gateways:
        shadow = get_gateway_shadow(gateway)

        # 9. If the type field is new, then the previously created ble_cmds array is added to the desired object and the shadow of all gateways is updated.
        if type == "new":
            if "desired" not in shadow:
                shadow["desired"] = {}
            shadow["desired"]["ble_cmds"] = ble_cmds
        # 10. If the type field is not new and have some other value, the previously created ble_cmds array is appended to the already available ble_cmds array in the desired object of the shadow and the shadow is then updated with modified desired object.
        else:
            if "desired" not in shadow:
                shadow["desired"] = {}
            if "ble_cmds" not in shadow["desired"]:
                shadow["desired"]["ble_cmds"] = []
            shadow["desired"]["ble_cmds"].extend(ble_cmds)

        # 11. All webhook URLs in the webhook array are fired with newly updated desired object of the gateway shadow.
        send_webhooks(webhooks, shadow["desired"])

    return {"success": True}

# Helper functions (Replace with your own implementation)

def get_organization_id_from_token(idToken):
    # Replace with your implementation to extract organizationId from the idToken
    return "your_organization_id"

def get_logger_metadata(loggers, organizationId):
    # Replace with your implementation to fetch logger metadata from RDS using the provided loggers and organizationId
    logger_metadata = []
    for logger in loggers:
        # Query RDS to get logger metadata
        metadata = {
            "deviceId": logger.deviceId,
            "command": logger.command,
            "profile": logger.profile,
            "project": logger.project,
            "deprovision": logger.deprovision,
            "lookback_hours": logger.lookback_hours
        }
        logger_metadata.append(metadata)
    return logger_metadata

def deprovision_logger(logger):
    # Replace with your implementation to perform deprovisioning action for the logger
    print(f"Deprovision logger: {logger['deviceId']}")

def reassign_logger(logger):
    # Replace with your implementation to perform reassignment action for the logger to another project
    print(f"Reassign logger: {logger['deviceId']}")

def get_gateways(site, zone):
    # Replace with your implementation to fetch gateways from RDS based on site/zone
    gateways = []
    # Query RDS to get gateways
    gateway = Gateway(site="TNT_Campbeel", zone="z-T32224")
    gateways.append(gateway)
    return gateways

def get_gateway_shadow(gateway):
    # Replace with your implementation to fetch the gateway shadow from AWS-IoT Core
    shadow = {
        "desired": {}
    }
    # Query AWS-IoT Core to get the shadow
    return shadow

# Usage example
loggers = [
    Logger(
        deviceId="C46A7CF980EF",
        command="uploadAndReset",
        profile=1,
        project="Pfizer",
        deprovision=True,
        lookback_hours=24
    ),
    Logger(
        deviceId="C46A7CF980F8",
        command="uploadAndReset",
        profile=1,
        project="Pfizer",
        deprovision=False,
        lookback_hours=24
    )
]

response = process_schedule_command(apiBaseUrl, idToken, ["https://webhook.site/ca160ddf-77c6-4f00-9ec3-78262009eefb"], "TNT_Campbeel", "z-T32224", "append", loggers)
print(response)
